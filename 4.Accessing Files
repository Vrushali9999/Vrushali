Accessing Files 

Basic file permission 
 permission groups:
Owner permissions − The owner's permissions determine what actions the owner of the file can perform on the file.
Group permissions − The group's permissions determine what actions a user, who is a member of the group that a file belongs to, can perform on the file. 
Other (world) permissions − The permissions for others indicate what action all other users can perform on the file.

Permissions :
Every file and directory in your UNIX/Linux system has following 3 permissions defined for all the 3 owners discussed above.

Read: This permission give you the authority to open and read a file. Read permission on a directory gives you the ability to lists its content.

Write: The write permission gives you the authority to modify the contents of a file. The write permission on a directory gives you the authority to add, remove and rename files stored in the directory. Consider a scenario where you have to write permission on file but do not have write permission on the directory where the file is stored. You will be able to modify the file contents. But you will not be able to rename, move or remove the file from the directory.

Execute: In Windows, an executable program usually has an extension ".exe" and which you can easily run. In Unix/Linux, you cannot run a program unless the execute permission is set. If the execute permission is not set, you might still be able to see/modify the program code(provided read & write permissions are set), but not run it.

r = read permission
w = write permission
x = execute permission
- = no permission

User with execute permissions can run a file as a program.
Directory Access Modes

 	No permission 	---
1 	Execute permission 	--x
2 	Write permission 	-w-
3 	Execute and write permission: 1 (execute) + 2 (write) = 3 	-wx
4 	Read permission 	r--
5 	Read and execute permission: 4 (read) + 1 (execute) = 5 	r-x
6 	Read and write permission: 4 (read) + 2 (write) = 6 	rw-
7 	All permissions: 4 (read) + 2 (write) + 1 (execute) = 7 	rwx

Changing Owners and Groups
While creating an account on Unix, it assigns a owner ID and a group ID to each user. All the permissions mentioned above are also assigned based on the Owner and the Groups.

Two commands are available to change the owner and the group of files −
chown command:chown − The chown command stands for "change owner" and is used to change the owner of a file.

chown command to change owner and group assignments,the sytax is:
chown owner:group filename
So to change the owner of the file to user and group to family you enter
chown user:family file.

chmod command:
chmod command allows you to change the permissions on a file using either a symbolic or a numeric mode.
Syntax:
$chmode g=r filename


	

	chgrp − The chgrp command stands for "change group" and is used to change the group of a file.

Changing Ownership
	The chown command changes the ownership of a file. The basic syntax is as follows −

	$ chown user filelist
	The value of the user can be either the name of a user on the system or the user id (uid) of a user on the system.

The following example will help you understand the concept −

		$ chown amrood testfile
	$
	Changes the owner of the given file to the user amrood.

	NOTE − The super user, root, has the unrestricted capability to change the ownership of any file but normal users can change the ownership of only those files that they own.

	Changing Group Ownership
	The chgrp command changes the group ownership of a file. The basic syntax is as follows −

	$ chgrp group filelist
The value of group can be the name of a group on the system or the group ID (GID) of a group on the system.

Following example helps you understand the concept −

	$ chgrp special testfile
	$
	Changes the group of the given file to special group.	
